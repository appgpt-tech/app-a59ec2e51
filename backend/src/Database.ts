//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { usersEntity } from './db/users.entity';
import { departmentsEntity } from './db/departments.entity';
import { initiativesEntity } from './db/initiatives.entity';
import { goalsEntity } from './db/goals.entity';
import { emissionSourcesEntity } from './db/emissionSources.entity';
import { resourceUsageEntity } from './db/resourceUsage.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      usersEntity,
      departmentsEntity,
      initiativesEntity,
      goalsEntity,
      emissionSourcesEntity,
      resourceUsageEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      users: [
        {
          userName: 'userName 1',
          department: 1,
          password: 'password 1',
          email: 'email 1',
          id: 16,
        },
        {
          userName: 'userName 2',
          department: 2,
          password: 'password 2',
          email: 'email 2',
          id: 9,
        },
        {
          userName: 'userName 3',
          department: 3,
          password: 'password 3',
          email: 'email 3',
          id: 87,
        },
        {
          userName: 'userName 4',
          department: 4,
          password: 'password 4',
          email: 'email 4',
          id: 1,
        },
        {
          userName: 'userName 5',
          department: 5,
          password: 'password 5',
          email: 'email 5',
          id: 64,
        },
      ],
      departments: [
        { departmentName: 'departmentName 1', departmentHead: 1, id: 42 },
        { departmentName: 'departmentName 2', departmentHead: 2, id: 66 },
        { departmentName: 'departmentName 3', departmentHead: 3, id: 43 },
        { departmentName: 'departmentName 4', departmentHead: 4, id: 29 },
        { departmentName: 'departmentName 5', departmentHead: 5, id: 6 },
      ],
      initiatives: [
        {
          name: 'name 1',
          description: 'description 1',
          startDate: '2024-02-19T20:10:36.591Z',
          endDate: '2023-12-05T15:30:43.762Z',
          relatedDepartment: 1,
          status: 'status 1',
          id: 12,
        },
        {
          name: 'name 2',
          description: 'description 2',
          startDate: '2025-01-06T13:53:56.353Z',
          endDate: '2023-09-14T06:28:29.834Z',
          relatedDepartment: 2,
          status: 'status 2',
          id: 14,
        },
        {
          name: 'name 3',
          description: 'description 3',
          startDate: '2023-09-28T23:54:34.547Z',
          endDate: '2024-06-16T09:08:27.352Z',
          relatedDepartment: 3,
          status: 'status 3',
          id: 88,
        },
        {
          name: 'name 4',
          description: 'description 4',
          startDate: '2024-07-09T22:57:51.519Z',
          endDate: '2025-04-14T03:43:17.708Z',
          relatedDepartment: 4,
          status: 'status 4',
          id: 53,
        },
        {
          name: 'name 5',
          description: 'description 5',
          startDate: '2023-10-14T01:25:03.132Z',
          endDate: '2024-06-05T15:01:40.106Z',
          relatedDepartment: 5,
          status: 'status 5',
          id: 88,
        },
      ],
      goals: [
        {
          name: 'name 1',
          description: 'description 1',
          targetDate: '2024-08-24T08:20:47.280Z',
          relatedDepartment: 1,
          status: 'status 1',
          id: 34,
        },
        {
          name: 'name 2',
          description: 'description 2',
          targetDate: '2024-11-07T22:02:47.753Z',
          relatedDepartment: 2,
          status: 'status 2',
          id: 44,
        },
        {
          name: 'name 3',
          description: 'description 3',
          targetDate: '2024-01-27T18:00:55.392Z',
          relatedDepartment: 3,
          status: 'status 3',
          id: 93,
        },
        {
          name: 'name 4',
          description: 'description 4',
          targetDate: '2025-01-05T15:46:20.084Z',
          relatedDepartment: 4,
          status: 'status 4',
          id: 78,
        },
        {
          name: 'name 5',
          description: 'description 5',
          targetDate: '2023-08-30T09:06:22.992Z',
          relatedDepartment: 5,
          status: 'status 5',
          id: 31,
        },
      ],
      emissionSources: [
        {
          sourceType: 'sourceType 1',
          quantityUsed: 0.41,
          emissionFactors: 0.03,
          totalEmissions: 0.12,
          id: 50,
        },
        {
          sourceType: 'sourceType 2',
          quantityUsed: 0.71,
          emissionFactors: 0.01,
          totalEmissions: 0.2,
          id: 23,
        },
        {
          sourceType: 'sourceType 3',
          quantityUsed: 0.24,
          emissionFactors: 0.88,
          totalEmissions: 0.48,
          id: 81,
        },
        {
          sourceType: 'sourceType 4',
          quantityUsed: 0.83,
          emissionFactors: 0.31,
          totalEmissions: 0.73,
          id: 47,
        },
        {
          sourceType: 'sourceType 5',
          quantityUsed: 0.49,
          emissionFactors: 0.93,
          totalEmissions: 0.97,
          id: 59,
        },
      ],
      resourceUsage: [
        {
          resourceType: 'resourceType 1',
          quantityConsumed: 0.52,
          unitOfMeasurement: 'unitOfMeasurement 1',
          periodOfConsumption: '2024-03-18T04:44:02.223Z',
          id: 26,
        },
        {
          resourceType: 'resourceType 2',
          quantityConsumed: 0.01,
          unitOfMeasurement: 'unitOfMeasurement 2',
          periodOfConsumption: '2024-12-22T17:47:01.126Z',
          id: 100,
        },
        {
          resourceType: 'resourceType 3',
          quantityConsumed: 0.66,
          unitOfMeasurement: 'unitOfMeasurement 3',
          periodOfConsumption: '2025-01-18T11:08:29.346Z',
          id: 48,
        },
        {
          resourceType: 'resourceType 4',
          quantityConsumed: 0.08,
          unitOfMeasurement: 'unitOfMeasurement 4',
          periodOfConsumption: '2023-10-12T07:30:45.537Z',
          id: 29,
        },
        {
          resourceType: 'resourceType 5',
          quantityConsumed: 0.61,
          unitOfMeasurement: 'unitOfMeasurement 5',
          periodOfConsumption: '2023-05-20T15:12:36.888Z',
          id: 17,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('usersEntity', data.users);
      await this.SeedResource('departmentsEntity', data.departments);
      await this.SeedResource('initiativesEntity', data.initiatives);
      await this.SeedResource('goalsEntity', data.goals);
      await this.SeedResource('emissionSourcesEntity', data.emissionSources);
      await this.SeedResource('resourceUsageEntity', data.resourceUsage);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
